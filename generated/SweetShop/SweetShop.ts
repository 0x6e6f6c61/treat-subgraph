// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTAdded extends ethereum.Event {
  get params(): NFTAdded__Params {
    return new NFTAdded__Params(this);
  }
}

export class NFTAdded__Params {
  _event: NFTAdded;

  constructor(event: NFTAdded) {
    this._event = event;
  }

  get nftIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get points(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get treatModel(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NFTCreatedAndAdded extends ethereum.Event {
  get params(): NFTCreatedAndAdded__Params {
    return new NFTCreatedAndAdded__Params(this);
  }
}

export class NFTCreatedAndAdded__Params {
  _event: NFTCreatedAndAdded;

  constructor(event: NFTCreatedAndAdded) {
    this._event = event;
  }

  get nftIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get points(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get isGiveAways(): Array<boolean> {
    return this._event.parameters[2].value.toBooleanArray();
  }

  get treatModel(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NFTsAdded extends ethereum.Event {
  get params(): NFTsAdded__Params {
    return new NFTsAdded__Params(this);
  }
}

export class NFTsAdded__Params {
  _event: NFTsAdded;

  constructor(event: NFTsAdded) {
    this._event = event;
  }

  get nftIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get points(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get treatModel(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OnCreatorRefUpdated extends ethereum.Event {
  get params(): OnCreatorRefUpdated__Params {
    return new OnCreatorRefUpdated__Params(this);
  }
}

export class OnCreatorRefUpdated__Params {
  _event: OnCreatorRefUpdated;

  constructor(event: OnCreatorRefUpdated) {
    this._event = event;
  }

  get oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OnCreatorUpdated extends ethereum.Event {
  get params(): OnCreatorUpdated__Params {
    return new OnCreatorUpdated__Params(this);
  }
}

export class OnCreatorUpdated__Params {
  _event: OnCreatorUpdated;

  constructor(event: OnCreatorUpdated) {
    this._event = event;
  }

  get oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetAdded extends ethereum.Event {
  get params(): SetAdded__Params {
    return new SetAdded__Params(this);
  }
}

export class SetAdded__Params {
  _event: SetAdded;

  constructor(event: SetAdded) {
    this._event = event;
  }

  get setId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get points(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get treatModel(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SweetShop__getCreatedNFTsRangeResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<boolean>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<boolean>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromBooleanArray(this.value2));
    return map;
  }
}

export class SweetShop__getListedCreatedNFTsRangeResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<boolean>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<boolean>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromBooleanArray(this.value2));
    return map;
  }
}

export class SweetShop__getNFTsListStatusResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SweetShop extends ethereum.SmartContract {
  static bind(address: Address): SweetShop {
    return new SweetShop("SweetShop", address);
  }

  createAndAddNFTs(
    maxNftSupplys: Array<BigInt>,
    nftAmounts: Array<BigInt>,
    isNotListedFlags: Array<boolean>,
    _nftData: Bytes
  ): Array<BigInt> {
    let result = super.call(
      "createAndAddNFTs",
      "createAndAddNFTs(uint256[],uint256[],bool[],bytes):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(maxNftSupplys),
        ethereum.Value.fromUnsignedBigIntArray(nftAmounts),
        ethereum.Value.fromBooleanArray(isNotListedFlags),
        ethereum.Value.fromBytes(_nftData)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_createAndAddNFTs(
    maxNftSupplys: Array<BigInt>,
    nftAmounts: Array<BigInt>,
    isNotListedFlags: Array<boolean>,
    _nftData: Bytes
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "createAndAddNFTs",
      "createAndAddNFTs(uint256[],uint256[],bool[],bytes):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(maxNftSupplys),
        ethereum.Value.fromUnsignedBigIntArray(nftAmounts),
        ethereum.Value.fromBooleanArray(isNotListedFlags),
        ethereum.Value.fromBytes(_nftData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  defaultCreatorPercentage(): BigInt {
    let result = super.call(
      "defaultCreatorPercentage",
      "defaultCreatorPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultCreatorPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultCreatorPercentage",
      "defaultCreatorPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultRefPercentage(): BigInt {
    let result = super.call(
      "defaultRefPercentage",
      "defaultRefPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultRefPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultRefPercentage",
      "defaultRefPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCreatedNFTsRange(
    startNftId: BigInt,
    endNftId: BigInt
  ): SweetShop__getCreatedNFTsRangeResult {
    let result = super.call(
      "getCreatedNFTsRange",
      "getCreatedNFTsRange(uint256,uint256):(uint256[],uint256[],bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(startNftId),
        ethereum.Value.fromUnsignedBigInt(endNftId)
      ]
    );

    return new SweetShop__getCreatedNFTsRangeResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBooleanArray()
    );
  }

  try_getCreatedNFTsRange(
    startNftId: BigInt,
    endNftId: BigInt
  ): ethereum.CallResult<SweetShop__getCreatedNFTsRangeResult> {
    let result = super.tryCall(
      "getCreatedNFTsRange",
      "getCreatedNFTsRange(uint256,uint256):(uint256[],uint256[],bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(startNftId),
        ethereum.Value.fromUnsignedBigInt(endNftId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SweetShop__getCreatedNFTsRangeResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBooleanArray()
      )
    );
  }

  getCreatorAddress(nftId: BigInt): Address {
    let result = super.call(
      "getCreatorAddress",
      "getCreatorAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(nftId)]
    );

    return result[0].toAddress();
  }

  try_getCreatorAddress(nftId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCreatorAddress",
      "getCreatorAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(nftId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCreatorRefAddress(treatModel: Address): Address {
    let result = super.call(
      "getCreatorRefAddress",
      "getCreatorRefAddress(address):(address)",
      [ethereum.Value.fromAddress(treatModel)]
    );

    return result[0].toAddress();
  }

  try_getCreatorRefAddress(treatModel: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCreatorRefAddress",
      "getCreatorRefAddress(address):(address)",
      [ethereum.Value.fromAddress(treatModel)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getListedCreatedNFTsRange(
    startNftId: BigInt,
    endNftId: BigInt
  ): SweetShop__getListedCreatedNFTsRangeResult {
    let result = super.call(
      "getListedCreatedNFTsRange",
      "getListedCreatedNFTsRange(uint256,uint256):(uint256[],uint256[],bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(startNftId),
        ethereum.Value.fromUnsignedBigInt(endNftId)
      ]
    );

    return new SweetShop__getListedCreatedNFTsRangeResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBooleanArray()
    );
  }

  try_getListedCreatedNFTsRange(
    startNftId: BigInt,
    endNftId: BigInt
  ): ethereum.CallResult<SweetShop__getListedCreatedNFTsRangeResult> {
    let result = super.tryCall(
      "getListedCreatedNFTsRange",
      "getListedCreatedNFTsRange(uint256,uint256):(uint256[],uint256[],bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(startNftId),
        ethereum.Value.fromUnsignedBigInt(endNftId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SweetShop__getListedCreatedNFTsRangeResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBooleanArray()
      )
    );
  }

  getNFTsListStatus(nftIds: Array<BigInt>): SweetShop__getNFTsListStatusResult {
    let result = super.call(
      "getNFTsListStatus",
      "getNFTsListStatus(uint256[]):(uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(nftIds)]
    );

    return new SweetShop__getNFTsListStatusResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getNFTsListStatus(
    nftIds: Array<BigInt>
  ): ethereum.CallResult<SweetShop__getNFTsListStatusResult> {
    let result = super.tryCall(
      "getNFTsListStatus",
      "getNFTsListStatus(uint256[]):(uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(nftIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SweetShop__getNFTsListStatusResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getNotListedCreatedNFTsRange(
    startNftId: BigInt,
    endNftId: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "getNotListedCreatedNFTsRange",
      "getNotListedCreatedNFTsRange(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startNftId),
        ethereum.Value.fromUnsignedBigInt(endNftId)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getNotListedCreatedNFTsRange(
    startNftId: BigInt,
    endNftId: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNotListedCreatedNFTsRange",
      "getNotListedCreatedNFTsRange(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startNftId),
        ethereum.Value.fromUnsignedBigInt(endNftId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isGiveAwayCard(param0: BigInt): boolean {
    let result = super.call(
      "isGiveAwayCard",
      "isGiveAwayCard(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isGiveAwayCard(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGiveAwayCard",
      "isGiveAwayCard(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSetId(): BigInt {
    let result = super.call("maxSetId", "maxSetId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSetId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSetId", "maxSetId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  melonCreatorPercentage(): BigInt {
    let result = super.call(
      "melonCreatorPercentage",
      "melonCreatorPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_melonCreatorPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "melonCreatorPercentage",
      "melonCreatorPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  melonNumber(): BigInt {
    let result = super.call("melonNumber", "melonNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_melonNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("melonNumber", "melonNumber():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  melonRefPercentage(): BigInt {
    let result = super.call(
      "melonRefPercentage",
      "melonRefPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_melonRefPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "melonRefPercentage",
      "melonRefPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftCosts(param0: BigInt): BigInt {
    let result = super.call("nftCosts", "nftCosts(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nftCosts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftCosts", "nftCosts(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftIdV2Start(): BigInt {
    let result = super.call("nftIdV2Start", "nftIdV2Start():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftIdV2Start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftIdV2Start", "nftIdV2Start():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftSetCosts(param0: BigInt): BigInt {
    let result = super.call("nftSetCosts", "nftSetCosts(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nftSetCosts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftSetCosts",
      "nftSetCosts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftSetIds(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "nftSetIds",
      "nftSetIds(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_nftSetIds(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftSetIds",
      "nftSetIds(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    _operator: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _amounts: Array<BigInt>,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    _operator: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _amounts: Array<BigInt>,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    _operator: Address,
    _from: Address,
    _id: BigInt,
    _amount: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    _operator: Address,
    _from: Address,
    _id: BigInt,
    _amount: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pausedTreats(): boolean {
    let result = super.call("pausedTreats", "pausedTreats():(bool)", []);

    return result[0].toBoolean();
  }

  try_pausedTreats(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pausedTreats", "pausedTreats():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  performerPercentages(param0: BigInt): BigInt {
    let result = super.call(
      "performerPercentages",
      "performerPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_performerPercentages(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performerPercentages",
      "performerPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performerSetPercentages(param0: BigInt): BigInt {
    let result = super.call(
      "performerSetPercentages",
      "performerSetPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_performerSetPercentages(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performerSetPercentages",
      "performerSetPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refPercentages(param0: BigInt): BigInt {
    let result = super.call(
      "refPercentages",
      "refPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_refPercentages(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refPercentages",
      "refPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refSetPercentages(param0: BigInt): BigInt {
    let result = super.call(
      "refSetPercentages",
      "refSetPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_refSetPercentages(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refSetPercentages",
      "refSetPercentages(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sweetShop(): Address {
    let result = super.call("sweetShop", "sweetShop():(address)", []);

    return result[0].toAddress();
  }

  try_sweetShop(): ethereum.CallResult<Address> {
    let result = super.tryCall("sweetShop", "sweetShop():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tittyFundAddress(): Address {
    let result = super.call(
      "tittyFundAddress",
      "tittyFundAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tittyFundAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tittyFundAddress",
      "tittyFundAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totwMart(): Address {
    let result = super.call("totwMart", "totwMart():(address)", []);

    return result[0].toAddress();
  }

  try_totwMart(): ethereum.CallResult<Address> {
    let result = super.tryCall("totwMart", "totwMart():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treatDaoToken(): Address {
    let result = super.call("treatDaoToken", "treatDaoToken():(address)", []);

    return result[0].toAddress();
  }

  try_treatDaoToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treatDaoToken",
      "treatDaoToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treatModels(param0: BigInt): Address {
    let result = super.call("treatModels", "treatModels(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_treatModels(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treatModels",
      "treatModels(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treatNFTMinter(): Address {
    let result = super.call("treatNFTMinter", "treatNFTMinter():(address)", []);

    return result[0].toAddress();
  }

  try_treatNFTMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treatNFTMinter",
      "treatNFTMinter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treatSetModels(param0: BigInt): Address {
    let result = super.call(
      "treatSetModels",
      "treatSetModels(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_treatSetModels(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treatSetModels",
      "treatSetModels(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treatTreasuryAddress(): Address {
    let result = super.call(
      "treatTreasuryAddress",
      "treatTreasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treatTreasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treatTreasuryAddress",
      "treatTreasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _TreatNFTMinterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _TreatTreasuryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _treatDaoAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _totwMartAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _sweetShopAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddGiveAwayTreatCall extends ethereum.Call {
  get inputs(): AddGiveAwayTreatCall__Inputs {
    return new AddGiveAwayTreatCall__Inputs(this);
  }

  get outputs(): AddGiveAwayTreatCall__Outputs {
    return new AddGiveAwayTreatCall__Outputs(this);
  }
}

export class AddGiveAwayTreatCall__Inputs {
  _call: AddGiveAwayTreatCall;

  constructor(call: AddGiveAwayTreatCall) {
    this._call = call;
  }

  get nftIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class AddGiveAwayTreatCall__Outputs {
  _call: AddGiveAwayTreatCall;

  constructor(call: AddGiveAwayTreatCall) {
    this._call = call;
  }
}

export class AddNFTCall extends ethereum.Call {
  get inputs(): AddNFTCall__Inputs {
    return new AddNFTCall__Inputs(this);
  }

  get outputs(): AddNFTCall__Outputs {
    return new AddNFTCall__Outputs(this);
  }
}

export class AddNFTCall__Inputs {
  _call: AddNFTCall;

  constructor(call: AddNFTCall) {
    this._call = call;
  }

  get nftIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AddNFTCall__Outputs {
  _call: AddNFTCall;

  constructor(call: AddNFTCall) {
    this._call = call;
  }
}

export class AddSetCall extends ethereum.Call {
  get inputs(): AddSetCall__Inputs {
    return new AddSetCall__Inputs(this);
  }

  get outputs(): AddSetCall__Outputs {
    return new AddSetCall__Outputs(this);
  }
}

export class AddSetCall__Inputs {
  _call: AddSetCall;

  constructor(call: AddSetCall) {
    this._call = call;
  }

  get nftIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddSetCall__Outputs {
  _call: AddSetCall;

  constructor(call: AddSetCall) {
    this._call = call;
  }
}

export class CreateAndAddNFTsCall extends ethereum.Call {
  get inputs(): CreateAndAddNFTsCall__Inputs {
    return new CreateAndAddNFTsCall__Inputs(this);
  }

  get outputs(): CreateAndAddNFTsCall__Outputs {
    return new CreateAndAddNFTsCall__Outputs(this);
  }
}

export class CreateAndAddNFTsCall__Inputs {
  _call: CreateAndAddNFTsCall;

  constructor(call: CreateAndAddNFTsCall) {
    this._call = call;
  }

  get maxNftSupplys(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get nftAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get isNotListedFlags(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }

  get _nftData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreateAndAddNFTsCall__Outputs {
  _call: CreateAndAddNFTsCall;

  constructor(call: CreateAndAddNFTsCall) {
    this._call = call;
  }

  get nftIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class EditSetCostCall extends ethereum.Call {
  get inputs(): EditSetCostCall__Inputs {
    return new EditSetCostCall__Inputs(this);
  }

  get outputs(): EditSetCostCall__Outputs {
    return new EditSetCostCall__Outputs(this);
  }
}

export class EditSetCostCall__Inputs {
  _call: EditSetCostCall;

  constructor(call: EditSetCostCall) {
    this._call = call;
  }

  get _setId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EditSetCostCall__Outputs {
  _call: EditSetCostCall;

  constructor(call: EditSetCostCall) {
    this._call = call;
  }
}

export class HarvestTreatsCall extends ethereum.Call {
  get inputs(): HarvestTreatsCall__Inputs {
    return new HarvestTreatsCall__Inputs(this);
  }

  get outputs(): HarvestTreatsCall__Outputs {
    return new HarvestTreatsCall__Outputs(this);
  }
}

export class HarvestTreatsCall__Inputs {
  _call: HarvestTreatsCall;

  constructor(call: HarvestTreatsCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class HarvestTreatsCall__Outputs {
  _call: HarvestTreatsCall;

  constructor(call: HarvestTreatsCall) {
    this._call = call;
  }
}

export class MigrateListingsCall extends ethereum.Call {
  get inputs(): MigrateListingsCall__Inputs {
    return new MigrateListingsCall__Inputs(this);
  }

  get outputs(): MigrateListingsCall__Outputs {
    return new MigrateListingsCall__Outputs(this);
  }
}

export class MigrateListingsCall__Inputs {
  _call: MigrateListingsCall;

  constructor(call: MigrateListingsCall) {
    this._call = call;
  }

  get startNftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get endNftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MigrateListingsCall__Outputs {
  _call: MigrateListingsCall;

  constructor(call: MigrateListingsCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemFreeTreatCall extends ethereum.Call {
  get inputs(): RedeemFreeTreatCall__Inputs {
    return new RedeemFreeTreatCall__Inputs(this);
  }

  get outputs(): RedeemFreeTreatCall__Outputs {
    return new RedeemFreeTreatCall__Outputs(this);
  }
}

export class RedeemFreeTreatCall__Inputs {
  _call: RedeemFreeTreatCall;

  constructor(call: RedeemFreeTreatCall) {
    this._call = call;
  }

  get nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemFreeTreatCall__Outputs {
  _call: RedeemFreeTreatCall;

  constructor(call: RedeemFreeTreatCall) {
    this._call = call;
  }
}

export class RedeemMultipleCall extends ethereum.Call {
  get inputs(): RedeemMultipleCall__Inputs {
    return new RedeemMultipleCall__Inputs(this);
  }

  get outputs(): RedeemMultipleCall__Outputs {
    return new RedeemMultipleCall__Outputs(this);
  }
}

export class RedeemMultipleCall__Inputs {
  _call: RedeemMultipleCall;

  constructor(call: RedeemMultipleCall) {
    this._call = call;
  }

  get _nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemMultipleCall__Outputs {
  _call: RedeemMultipleCall;

  constructor(call: RedeemMultipleCall) {
    this._call = call;
  }
}

export class RedeemSetCall extends ethereum.Call {
  get inputs(): RedeemSetCall__Inputs {
    return new RedeemSetCall__Inputs(this);
  }

  get outputs(): RedeemSetCall__Outputs {
    return new RedeemSetCall__Outputs(this);
  }
}

export class RedeemSetCall__Inputs {
  _call: RedeemSetCall;

  constructor(call: RedeemSetCall) {
    this._call = call;
  }

  get _setId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemSetCall__Outputs {
  _call: RedeemSetCall;

  constructor(call: RedeemSetCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCreatorOverridesCall extends ethereum.Call {
  get inputs(): SetCreatorOverridesCall__Inputs {
    return new SetCreatorOverridesCall__Inputs(this);
  }

  get outputs(): SetCreatorOverridesCall__Outputs {
    return new SetCreatorOverridesCall__Outputs(this);
  }
}

export class SetCreatorOverridesCall__Inputs {
  _call: SetCreatorOverridesCall;

  constructor(call: SetCreatorOverridesCall) {
    this._call = call;
  }

  get nftIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get overrideAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetCreatorOverridesCall__Outputs {
  _call: SetCreatorOverridesCall;

  constructor(call: SetCreatorOverridesCall) {
    this._call = call;
  }
}

export class SetCreatorRefOverridesCall extends ethereum.Call {
  get inputs(): SetCreatorRefOverridesCall__Inputs {
    return new SetCreatorRefOverridesCall__Inputs(this);
  }

  get outputs(): SetCreatorRefOverridesCall__Outputs {
    return new SetCreatorRefOverridesCall__Outputs(this);
  }
}

export class SetCreatorRefOverridesCall__Inputs {
  _call: SetCreatorRefOverridesCall;

  constructor(call: SetCreatorRefOverridesCall) {
    this._call = call;
  }

  get treatCreators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get overrideAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetCreatorRefOverridesCall__Outputs {
  _call: SetCreatorRefOverridesCall;

  constructor(call: SetCreatorRefOverridesCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetPausedTreatsCall extends ethereum.Call {
  get inputs(): SetPausedTreatsCall__Inputs {
    return new SetPausedTreatsCall__Inputs(this);
  }

  get outputs(): SetPausedTreatsCall__Outputs {
    return new SetPausedTreatsCall__Outputs(this);
  }
}

export class SetPausedTreatsCall__Inputs {
  _call: SetPausedTreatsCall;

  constructor(call: SetPausedTreatsCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedTreatsCall__Outputs {
  _call: SetPausedTreatsCall;

  constructor(call: SetPausedTreatsCall) {
    this._call = call;
  }
}

export class SetPercentagesCall extends ethereum.Call {
  get inputs(): SetPercentagesCall__Inputs {
    return new SetPercentagesCall__Inputs(this);
  }

  get outputs(): SetPercentagesCall__Outputs {
    return new SetPercentagesCall__Outputs(this);
  }
}

export class SetPercentagesCall__Inputs {
  _call: SetPercentagesCall;

  constructor(call: SetPercentagesCall) {
    this._call = call;
  }

  get _defaultCreatorPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _melonCreatorPercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _defaultRefPercentage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _melonRefPercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetPercentagesCall__Outputs {
  _call: SetPercentagesCall;

  constructor(call: SetPercentagesCall) {
    this._call = call;
  }
}

export class TittyFundCall extends ethereum.Call {
  get inputs(): TittyFundCall__Inputs {
    return new TittyFundCall__Inputs(this);
  }

  get outputs(): TittyFundCall__Outputs {
    return new TittyFundCall__Outputs(this);
  }
}

export class TittyFundCall__Inputs {
  _call: TittyFundCall;

  constructor(call: TittyFundCall) {
    this._call = call;
  }

  get _tittyFundAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TittyFundCall__Outputs {
  _call: TittyFundCall;

  constructor(call: TittyFundCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TreasuryCall extends ethereum.Call {
  get inputs(): TreasuryCall__Inputs {
    return new TreasuryCall__Inputs(this);
  }

  get outputs(): TreasuryCall__Outputs {
    return new TreasuryCall__Outputs(this);
  }
}

export class TreasuryCall__Inputs {
  _call: TreasuryCall;

  constructor(call: TreasuryCall) {
    this._call = call;
  }

  get _treatTreasuryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TreasuryCall__Outputs {
  _call: TreasuryCall;

  constructor(call: TreasuryCall) {
    this._call = call;
  }
}

export class UpdateTotwMartCall extends ethereum.Call {
  get inputs(): UpdateTotwMartCall__Inputs {
    return new UpdateTotwMartCall__Inputs(this);
  }

  get outputs(): UpdateTotwMartCall__Outputs {
    return new UpdateTotwMartCall__Outputs(this);
  }
}

export class UpdateTotwMartCall__Inputs {
  _call: UpdateTotwMartCall;

  constructor(call: UpdateTotwMartCall) {
    this._call = call;
  }

  get _newTotwMartAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTotwMartCall__Outputs {
  _call: UpdateTotwMartCall;

  constructor(call: UpdateTotwMartCall) {
    this._call = call;
  }
}

export class UpdateTreatDaoCall extends ethereum.Call {
  get inputs(): UpdateTreatDaoCall__Inputs {
    return new UpdateTreatDaoCall__Inputs(this);
  }

  get outputs(): UpdateTreatDaoCall__Outputs {
    return new UpdateTreatDaoCall__Outputs(this);
  }
}

export class UpdateTreatDaoCall__Inputs {
  _call: UpdateTreatDaoCall;

  constructor(call: UpdateTreatDaoCall) {
    this._call = call;
  }

  get _newTreatAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTreatDaoCall__Outputs {
  _call: UpdateTreatDaoCall;

  constructor(call: UpdateTreatDaoCall) {
    this._call = call;
  }
}

export class UpdateYeOlSweetShopCall extends ethereum.Call {
  get inputs(): UpdateYeOlSweetShopCall__Inputs {
    return new UpdateYeOlSweetShopCall__Inputs(this);
  }

  get outputs(): UpdateYeOlSweetShopCall__Outputs {
    return new UpdateYeOlSweetShopCall__Outputs(this);
  }
}

export class UpdateYeOlSweetShopCall__Inputs {
  _call: UpdateYeOlSweetShopCall;

  constructor(call: UpdateYeOlSweetShopCall) {
    this._call = call;
  }

  get _newSweetShopAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateYeOlSweetShopCall__Outputs {
  _call: UpdateYeOlSweetShopCall;

  constructor(call: UpdateYeOlSweetShopCall) {
    this._call = call;
  }
}
